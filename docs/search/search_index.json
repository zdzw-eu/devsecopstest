{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation ZDZW","text":""},{"location":"WP07/wp07/","title":"Documentation WP07","text":""},{"location":"WP07/KubernetesPlatform/","title":"KubernetesPlatform","text":""},{"location":"WP07/KubernetesPlatform/#general-description","title":"General Description","text":"<p>This solution provides the key infrastructure where the ZDZW solutions are deployed and integrated. The Kubernetes Platform as per its descriptive name, is based on Kubernetes and Containers technologies.</p> <p>Containers have quickly become the standard for application deployment. Containers are units of software that package up code and all dependencies so that an application is able to run quickly and reliably in various computing environments, from OnPremise to OnCloud to Edge deployments.</p> <p>Kubernetes is the leading container orchestration technology and has become the de facto standard for container orchestration. Kubernetes is a portable, extensible, open-source platform for managing containerized workloads. It facilitates declarative configuration and automation, takes care of scaling and failing over applications, provides deployment patterns, and more. </p> <p>The Kubernetes Platform is a pre-packaged Kubernetes bundle, based on Kubernetes K3s, with several other tools to provide a fully featured production ready Kubernetes environment, such as:</p> <ul> <li>K3s: the lightweight Kubernetes, is a fully compliant Kubernetes distribution, easy to install, half the memory, all in a binary of less than 100 MB among other enhancements</li> <li>Rancher: Kubernetes cluster management tool with a user friendly UI</li> <li>Helm: the package manager for Kubernetes. The ZDZW solutions will be packaged using Helm charts</li> <li>Ingress Controller: the entry point for the cluster through the applications URLs using HTTP/HTTPS or TCP</li> <li>Service Mesh: transparent layer for enhanced connectivity, security, control and observability in the cluster</li> <li>Kubernetes Storage: provide the Kubernetes native storage for the stateful applications</li> </ul> <p>The Platform can be installed on-Cloud, on-Prem and on the Edge, providing great flexibility for the different ZDZW solutions needs. Within the scope of the project, there is the possibility to create a prototype of a Hardware box for Edge and on-Prem installation and connectivity with the cloud platform.</p>"},{"location":"WP07/KubernetesPlatform/#top-ten-functionalities","title":"Top Ten Functionalities","text":"<ol> <li>Installation Process: The Platform provides a user friendly installation process for easy installation to non-experienced users.    In any case, management of the platform itself, will require some expertise.</li> <li>Flexibitlity of installation modes: supports different installation modes from on-cloud to on-prem and edge</li> <li>Development installation: The suite provides a development version of the platform so-called miniZDZW for ZDZW solutions developers to be able to test deployment of the apps in a development environment</li> <li>Platform Scalability: grows in resources as needed, i.e. add additional nodes</li> <li>Management Interface: provides a user friendly UI for cluster management. Management of the platform itself will require some expertise</li> <li>Management of Apps: provides the interface and API to manage apps in the platform : deployment, deletion, upgrade</li> <li>Monitoring of Platfom and Apps: provides the interface and API to monitor the platform itself and the apps running in the platform</li> <li>App Packaging \u2013 Helm Charts: provides the app packaging in the form of Helm charts for repeatable deployments. Provides platform side configuration to be applied during deployment of the apps</li> <li>Base Charts Engine: provides a cli to automatically create the application Helm chart based on base charts defined by operations or devops teams</li> <li>Networking-Connectivity: provides secure networking and connectivity among the installed apps and to and from outside the cluster</li> <li>Log management: ability to retrieve application logs for troubleshooting and debugging</li> <li>Native Storage: provide Kubernetes native storage for stateful applications</li> </ol>"},{"location":"WP07/KubernetesPlatform/#architecture-diagram","title":"Architecture Diagram","text":"<p>This Figure represents a high level architecture diagram of the ZDZW Kubernetes Platform. </p> <p>The ZDZW Platform solution has the following components:</p> <ul> <li> <p>Kubernetes: leading technology in container orchestration, key component that manages the deployment and integration of ZDZW applications. The current distribution used is K3s, which is a lightweight version of Kubernetes as described above. One of the main advantages of using the K3s distribution is that the same technology can be used to install a large OnCloud Kubernetes cluster, or a single node cluster deployed on the edge. The current Kubernetes version installed is 1.26 which is the most up to date version compatible with Rancher</p> </li> <li> <p>Management UI - API: open source software mainly based on Rancher that allows to deploy and manage Kubernetes clusters in a more user-friendly way both on-premise and on-cloud. The Rancher application will provide not only the management interface for platform administrators but also the app installation interface and API integration for ZDZW users. The current Rancher version being used is 2.7.9</p> </li> <li> <p>ServiceMesh \u2013 Ingress Controller: allows to add transparently a layer to provide the platform with enhanced connectivity, security, control and observability. It uses a sidecar container deployed along the application container to provide the service mesh features. This service mesh also allows for connectivity between distributed clusters, such as on-prem to on-cloud. The Service Mesh is not yet installed in the current ZDZW Platform, and nginx ingress controller version is being used, but will be installed in the next iteration of the platform</p> </li> <li> <p>Gateway - Ingress: provides the entry point to the cluster and the service mesh for all network traffic. It exposes the applications through the internet. The current ingress resource is based on nginx ingress controller, and will likely evolve to ServiceMesh Gateway when the ServiceMesh is installed </p> </li> <li> <p>Monitoring UI-API: open source software mainly based on Prometheus + Grafana, provides the monitoring interface for the cluster and the ZDZW applications. It may provide also an interaction with the ZDZW usage traceability. Prometheus and Grafana have not beeen installed yet in the platform and the Rancher monitoring capabilities are being used</p> </li> <li> <p>Storage Management: provides the interface between Kubernetes and the physical storage, i.e. NFS controller, EBS controller \u2026 At the moment, the current setup is using local storage for apps but this will change in future iterations of the platform where NFS and/or Kubernetes native storage will be used </p> </li> <li> <p>CertManager: provides management of SSL certificates for secure connectivity ie. HTTPS, with verified signed certificates using Let\u2019s Encrypt. Cert-manager version is being used. The current certificates are self-signed since in this iteration no application is being exposed to internet. This will change in the next iteration of the platform, where Let's Encrypt signed certificates will be created for the applications</p> </li> </ul>"},{"location":"WP07/KubernetesPlatform/#image-overview","title":"Image Overview","text":"<p>Add here real screen shots from the apps or mockups from the Software Specification document</p>"},{"location":"WP07/KubernetesPlatform/#hardware-components","title":"Hardware Components","text":"<p>The current ZDZW Cloud platform is runing in Ascens cloud vendor using three Ubuntu 20 VMs with the requirements detailed in the next section. The Hardware details in this case are not required since provided by cloud vendor.</p>"},{"location":"WP07/KubernetesPlatform/#computation-requirements","title":"Computation Requirements","text":"<p>For the development installation of the platform or edge deployment (minizdzw), these are the minimum requirements. This can be increased depending on the number of ZDZW solutions to be deployed:</p> <ul> <li>4 CPUs</li> <li>6-8 GB RAM</li> <li>32 GB Storage</li> </ul> <p>For a private OnCloud/OnPrem deployment of the platform a minimum of three nodes cluster is recomended with requirements similar to the ones in the current ZDZW Cloud Platform:</p> <ol> <li> <p>Master Node</p> <ul> <li>8 CPUs</li> <li>8 GB RAM</li> <li>64 GB Storage</li> </ul> </li> <li> <p>Two Worker Nodes each with</p> <ul> <li>8 CPUs</li> <li>16 GB RAM</li> <li>256 GB Storage</li> </ul> </li> </ol>"},{"location":"WP07/KubernetesPlatform/#installation-procedure","title":"Installation Procedure","text":"<p>There are two different setups, one for development or edge deployment named after miniZDZW which is just a single node cluster version of the actual platform, and fully featured Kubernetes Platform.</p>"},{"location":"WP07/KubernetesPlatform/#minizdzw","title":"miniZDZW","text":"This is a tool to install a single node cluster version of ZDZW Kubernetes Platform. The user just needs to run a single script and this will install and configure all the required tools.<ol> <li>Clone the repository <code>bash git clone https://minizdzw</code></li> <li>Navigate to minizdzw folder <code>bash cd minizdzw</code></li> <li> <p>Run minizdzw <code>bash ./minizdzw.sh ip iface</code> where ip is the ip of the node where running the script and iface is the network interface of the ip. The script will install and configure all the required tools for miniZDZW platform to run. That is:</p> <ul> <li>Docker</li> <li>K3s (Kubernetes)</li> <li>Helm</li> <li>Cert-manager</li> <li>Rancher</li> <li>Creates a self signed certificate to use by the ingress controller</li> <li>Nginx Ingress Controller</li> <li>nginx docker (load balancer)</li> </ul> </li> <li> <p>Once the script has successfully installed miniZDZW, access the Rancher URL at https://rancher.minizdzw.$nodeip.sslip.io, which is the default domain used during the installation. Enter the default admin password set by default to \"admin\" and create a new admin password. Start managing the Kubernetes cluster and apps using the Rancher UI. In the \"How To Use\" section there will be detailed instructions on how to use and perform the key management actions of the Kubernetes platform</p> </li> </ol>"},{"location":"WP07/KubernetesPlatform/#kubernetes-platform-installation-kit","title":"Kubernetes Platform Installation Kit","text":"<p>An installer for the Kubernetes Platform called Installation Kit has been developed.   The idea is to allow non experienced users to deploy the platform along with a fully featured Kubernetes cluster, with all tools installed and configured.   The ZDZW Installation Kit will run as a docker container on an installation node or even on a local laptop and will install the platform in the remote nodes.   The Installation Kit allows the user to configure and customize the installation process using some forms via browser and will run Ansible playbooks on the backend in order to effectively install the platform.</p> <p>The main steps to install the Kubernetes Platform are:</p> <ol> <li> <p>Run the Installation Kit image</p> <p><code>bash sudo docker run</code></p> </li> <li> <p>Navigate to your local browser at http://127.0.0.1</p> </li> <li>Enter the user to be used for installation, by default icedrancher</li> <li>Download the create_user.sh script and run it manually on the nodes where the platform will be installed. This script will create the installation user in each platform node and distribute the ssh keys in order to be able to run the commands from the installation node. Clik the \"Next\" button once the script has been run in all nodes</li> <li>Fill in all the forms with the required cluster info<ul> <li>1 Basic Options: enter the cluster name</li> <li>2 Load Balancer Options: enable an external nginx load balancer option if you don't have a load balancer. Enter the ip of the node where the nginx loadbalancer will be installed.</li> <li>3 K3s Options: enter the details of the nodes where the cluster will be installed.    Click on add in order to add a new node. In the pop up dialogue enter the Node Type (master or worker), the IP and the network interface. You have to create at least one master node and an odd number of them.</li> <li>4 Rancher options: select whether to use the same domain for Rancher than the applications one</li> <li>5 Confirmation: review the options selected and click on the Install button. The installation will start. Once installation is successfull click on Done button and the cluster is installed. You can now navigate to the Rancher UI.</li> </ul> </li> </ol>"},{"location":"WP07/KubernetesPlatform/#how-to-use","title":"How To Use","text":"<p>This section provides the steps not only on how to use the Kubernetes Platform and the Rancher UI but also instructions on how to prepare the Helm Charts for the platform.</p>"},{"location":"WP07/KubernetesPlatform/#kubernetes-platform","title":"Kubernetes Platform","text":"<p>Once the ZDZW Kubernetes Platform has been installed and the Rancher UI can be accessed as show in section \"Installation Procedure\", these key management actions can be performed:</p> <ul> <li> <p>Inspect the cluster and check number of nodes, resources, etc   Ref to snapshot</p> </li> <li> <p>A user can register a catalog or repository in order to be able to deploy apps from that catalog. A catalog is just a repository, git or helm, where helm charts are stored. Rancher has already some default catalogs registered. In order to create the new one, navigate to the cluster, apps, repositories, and click on the \"Add Catalog\" button. Fill in the form with the credentials for a private repository and click \"Create\". The Catalog is added to Rancher and the apps will be displayed in the Apps view   Ref to snapshot</p> </li> <li> <p>Applications can be deployed from the registered Catalog. Navigate to the Apps section where the list of deployed apps is displayed. Click on Launch button. The list of available apps is displayed. Select the app to be deployed, fill in the configuration form and click on Install. The application will be deployed to the platform.   Ref to snapshot</p> </li> <li> <p>Inspect the application and logs. </p> </li> <li> <p>Delete applications</p> </li> </ul> <p>For more detailed description on these steps, refer to Additional Learning Materials, the Rancher documentation.</p>"},{"location":"WP07/KubernetesPlatform/#helm-charts","title":"Helm Charts","text":"<p>Helm is the package manager for Kubernetes. It helps you manage Kubernetes applications by combining the different Kubernetes resources an application is composed of in a single package, the Helm Chart, that you can create, share, version, publish, install, upgrade and delete. It also provides templating functionality so that different values can be configured for an application.</p> <p>But creating a Helm Chart and the Kubernetes resources is not an easy task since it requires some Kubernetes knowledge. For that reason the Kubernetes Platform provides a base or template Helm Chart to be imported as a subchart in an application chart.</p> <p>The idea is that developers creating zwApps can re-use this base chart as many times as per the number of modules in their zwApp, i.e. frontend, backend, without any knowledge of Kubernetes related stuff, and only having to override a set of values.</p> <p>The base chart includes the following resources pre-configured to be re-used out of the box:</p> <ul> <li>A deployment</li> <li>A service</li> <li>An ingress</li> <li>A persistent volume and persistent volume claim</li> <li>A service account</li> <li>A registry secret</li> <li>A pre-configured set of values in values.yaml</li> </ul> <p>With this, developers just need to include the base chart in their chart folder, and override some values depending on apps needs, that is just having to update a single yaml file vs creating all Kubernetes related resources yaml files, thus simplifying developers integration with Kubernetes and the Kubernetes learning curve.</p> <p>These are the detailed step by step instructions in order to use the base Helm Chart. We will refer to the base chart as zapp-base and to the zwapp chart as zwapp:</p> <ul> <li> <p>Create a helm chart using helm cli  <code>helm create zwapp</code> where zwapp is the name of the chart to be created</p> </li> <li> <p>Remove non-required folders and files <code>rm -rf zwapp/templates/* rm zwapp/values.yaml</code></p> </li> <li> <p>Copy the base helm chart to the zwapp charts subfolder with a different name i.e. zmodule1, and replace the Chart.yaml name accordingly. Copy the base helm chart values.yaml to the zwapp values <code>cp -r zapp-base/ zwapp/charts/zmodule1 sed -i 's/zapp-base/zmodule1/' zwapp/charts/zmodule1/Chart.yaml cp zwapp/charts/zmodule1/values.yaml zwapp/</code></p> </li> <li> <p>Edit the zwapp values in order to leave only the variables you need to override. Add the reference to the subchart name (the base chart) and ident all related values to the right. This is an example of a values file in order to override the app related values <code>zmodule1:   app:     name: myname     port: 80</code></p> </li> <li> <p>Add an optional configmap if you need to include zwapp related env variables to be set. For this, you can set the values app.env to true (default). Then add in the zwapp/templates folder a configmap with the name $appname-configmap.yaml, where $appname is the name of the app in the values variable app.name. This is an example of a configmap <code>apiVersion: v1 kind: ConfigMap metadata:   name: {{ .Values.zmodule1.app.name }}-configmap   namespace: {{ .Release.Namespace }} data:   WELCOME_MESSAGE: {{ .Values.welcome_message }}</code></p> </li> </ul> <p>For additional instructions and examples see ZDZW Integration and Helm Chart links at Additional Learning Materials section.</p>"},{"location":"WP07/KubernetesPlatform/#additional-learning-materials","title":"Additional Learning Materials","text":"<p>Kubernetes https://v1-26.docs.kubernetes.io/docs/home/</p> <p>Helm https://helm.sh/</p> <p>K3s https://k3s.io/</p> <p>Rancher https://ranchermanager.docs.rancher.com/v2.7/getting-started/quick-start-guides</p> <p>Integration https://github.com/zdzw-eu/integration/tree/main</p>"},{"location":"WP07/Portal/","title":"Portal","text":""},{"location":"WP07/Portal/#general-description","title":"General Description","text":"<p>The Portal is the main website entry point to the ZDZW platform and its applications and it is based on the ZDMP Portal. It displays the applications that can be accessed as icons and users can navigate to them through the portal. </p> <p>The Portal will allow for organisation and users registration providing the single sign on functionality and incorporating the security aspect of the ZDZW platform using Keycloak and its users and RBAC functionality. </p> <p>The Portal also includes the Dash Button, a web component that needs to be integrated in all ZDZW solutions to provide an interface to the portal for session and JWT token management and allow users to navigate between ZDZW applications and provide support to the single sign on.</p>"},{"location":"WP07/Portal/#top-ten-functionalities","title":"Top Ten Functionalities","text":"<ol> <li>UI main platform entry point: provides a UI that is the main entry point to the platform</li> <li>Display list of available apps: displays the list available apps to be able to navigate from the portal to a ZDZW app</li> <li>Display information on available apps: displays the status of the available apps as installed or not installed, and a link to the management UI in order to install the application if not installed</li> <li>Register an organisation and admin user: allows for organisation registration and admin user of the organisation in keycloak</li> <li>User management: allows to create additional users for an organisation</li> <li>Role Management: allows to create and assign roles to users</li> <li>Dash Button: provides a web component for zdzw security integration and easy navigation between zdzw applications</li> <li>JWT Management: provides a web component for token management</li> <li>Security Realm: provides management of security realms</li> </ol>"},{"location":"WP07/Portal/#architecture-diagram","title":"Architecture Diagram","text":"<p>This Figure represents a high level architecture diagram of the ZDZW Portal </p> <p>The Portal solution has the following components:</p> <ul> <li> <p>Portal UI: this is the main ui to allow access to the platform and the different ZDZW applications, providing single sign on and the list of available apps</p> </li> <li> <p>Portal Backend: the backend component of the portal, being the responsible for getting the list of apps and status from the Platform, and also act as the interface with the security component Keycloak</p> </li> <li> <p>Portal API: the API of the Portal Backend to allow communication from the Portal UI and the Dash Button  </p> </li> <li> <p>Dash Button: web component integrated into ZDZW UI apps that allow communication with the Portal and the security component </p> </li> <li> <p>Keycloak: open source software for security management</p> </li> </ul>"},{"location":"WP07/Portal/#image-overview","title":"Image Overview","text":"<p>Add here real screen shots from the apps or mockups from the Software Specification document</p>"},{"location":"WP07/Portal/#hardware-components","title":"Hardware Components","text":"<p>The Portal does not have any hardware component.</p>"},{"location":"WP07/Portal/#computation-requirements","title":"Computation Requirements","text":"<p>The deployment of the Portal on top of ZDZW Platform, these are the minimum requirements:</p> <ul> <li> <p>1 CPU</p> </li> <li> <p>1 GB RAM</p> </li> <li> <p>2 GB Storage</p> </li> </ul> <p>These can be increased depending on the number of apps, users and organisations.</p>"},{"location":"WP07/Portal/#installation-procedure","title":"Installation Procedure","text":"<p>This section describes how to deploy the Portal on the ZDZW Kubernetes Platform and/or miniZDZW. It also describes how to integrate the Dash Button in a zwApp.</p>"},{"location":"WP07/Portal/#portal_1","title":"Portal","text":"<p>The Portal can be installed on the ZDZW Kubernetes Platform or miniZDZW with the helm charts and the Rancher UI as a regular zwApp, once the zdzwcatalog repository has been registered as per the ZDZW Kubernetes Platform instructions and following the instructions on how to install an app.</p> <p>The following variables can be set when installing the app:</p> <ol> <li> <p>Variable</p> </li> <li> <p>Variable</p> </li> </ol>"},{"location":"WP07/Portal/#dash-button","title":"Dash Button","text":"<p>The Dash Button is a Portal webcomponent that needs to be integrated by zwApps and will provide functionalities related to single-sign-on and navigation through the zwApps in the platform.</p>"},{"location":"WP07/Portal/#how-to-use","title":"How To Use","text":""},{"location":"WP07/Portal/#additional-learning-materials","title":"Additional Learning Materials","text":""}]}